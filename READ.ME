this is a new test1
this is demo
this is demo3
test2
test3
test4
test5


Install docker first
install kubernetes
run this command to start kubernetes

sudo rm /etc/containerd/config.toml
sudo systemctl restart containerd

-----------------------------------
only on master node
---------------------------------
sudo kubeadm init --pod-network-cidr=10.244.0.0/16

use this command to get join token for worker node
kubeadm token create --print-join-command

 -----------------------------------------------------
incase if needed run these commands
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
------------------------------------------------------------
then install flannel

kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml


------------------------------------
install docker first
install jave 
install jenkins
-------------------------------------
get github token
set github credentials
set docker credentials
-----------------------------------------
go to ~ in th ekube server
got to .kube
get the config file and create a yaml in local
create kube credentials with local
--------------------------------
got to github repo settings
set webhook with the jenkins ipaddress with /github-webhook/

----------------------------------
use this to setup ebs for mysql storage

kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=master"


--------------------------------
deploy all mysql yaml
secret
storageclass 
storage
statefulset
service
---------------------------------

use this command to provide permission to jenkins

sudo usermod -aG docker jenkins
sudo chmod 666 /var/run/docker.sock
 after this restart jenkins
-----------------------------------
then install kubectl in jenkins to use kubectl

------------------------------------
run the build and check
-------------------
seed the database

-------------------------

install nginx and enable it
cd to this location int he worker node
/etc/nginx/conf.d

use the belwo nginx proxy script
server {
    listen 80;
    server_name domain1.example.com;

    location / {
        proxy_pass http://15.207.88.83:30080;
    }
}
server {
    listen 80;
    server_name domain2.example.com;

    location / {
        proxy_pass http://15.207.88.83:30080;
    }
}
server {
    listen 80;
    server_name domain3.example.com;

    location / {
        proxy_pass http://15.207.88.83:30080;
    }
}

edit the ipaddress accordingly
---------------------------

now got to etc directory from root in local machine and edit the hosts file like the below format

15.207.88.83 domain1.example.com
15.207.88.83 domain2.example.com
15.207.88.83 domain3.example.com

----------------------------------------------------------------
ansible

install ansible
restart the ec2 instance
create a directory
touch ansible.cfg
use the belwo formate
---------                                    
[defaults]
inventory = hosts
host_key_checking = False
remote_user = ubuntu
---------------
touch hosts in the smae directory
 sue the belwo format with the right ip address

[ec2_instances]
ec2-1 ansible_host=3.110.223.204 ansible_ssh_private_key_file=/home/balaji/test-project/kube/ansible/ansible.pem


--------------------------

create a playbook.yml file

---
- name: install pip3 in ec2
  hosts: ec2_instances
  become: yes
  tasks: 
    - name: pip3 installation
      apt:
        name: python3-pip
        state: present 
    - name: httpd
      apt:
        name: apache2
        state: present
    - name: Enable Apache2 service
      ansible.builtin.systemd:
        name: apache2
        enabled: yes

    - name: Start Apache2 service
      ansible.builtin.systemd:
        name: apache2
        state: started
-------------------------------
use ansible playbook with this file







